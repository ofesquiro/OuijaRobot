branch main:
	
	- modificaciones hechas el 10 / 5
	main.py fue borrado ya que no era de utilidad

	logramos levantar el entorno de python correctamente. con esto los dockers quedan obsoletos.

	los comandos que se requieran para el inicio del entorno de python se ponen estan en shellPyenvSetUp.csh y setUp.csh (en ese orden)que se corre una unica vez.
	SON UNICAMENTE PARA DISTRIBUCIONES DE LINUX

	!! muchos de los comandos necesarios modifican carpetas fuera del entorno de python por lo que los permisos
	de administrador son necesarios

	los comandos para ejecutar los archivos de python estan en run.csh + un comando de timeout para que en caso de terminacion por cualquier motivo del programa tengamos un timepo para ver los errores que salgan en la terminal

	dado a los cambios recientes sobre los entornos de python, DeviceInputInfoGatherer.py no es mas necesario y es borrado

	con la creacion de los entornos de python se agrega una carpeta de ouijaEnv (nombre del entorno)
	esta carpeta NO se debe modificar manualmente y el hecho que este no significa que vaya a funcionar en cualquier dispositivo.
	requiere de las instrucciones de shellPyenvSetUp.csh, de la activacion del entorno (linea 3 de setUp.csh) y el run.csh
	--
	12/5
	renombrado de test.py a main.py

	hay que descargar archivos para la configuracion del idioma español usando sphinx.
	archivos en /models
	LA CARPETA MODELS NO MODIFICA EN ABSOLUTO EL FUNCIONAMIENTO DEL MODELO DE ESPAÑOL. ES SOLO DE REFERENCIA

	EN WINDOWS la carpeta de models se copia en la ruta C:\Users\Hp\AppData\Local\Programs\Python\Python312\Lib\site-packages\speech_recognition\pocketsphinx-data\
    	veremos donde es en linux.
	
	si esta carpeta no existe tenes que instalar el sphinx antes. pip3 install pocketsphinx

	tambien hay que agregar al los comandos de run pip3 install pygame esta vez obligatoriamente para el funcionamiento del reproductor del .mp3
	cuando este no se use mas, pygame no sera mas necesario y se puede sacar de la lista de comandos

    	se reemplazo el metodo de reconocimiento de voz. en lugar de usar la api de google cloud. se use el metodo de reconocimiento con sphinx que es offline y gratis.
    	unico problema es que hay que agregar la carpeta con las especificaciones del idioma y suele ser lento, un poco impreciso y de poco vocabulario

    	se borro el archivo de docker-conf-vieja ya que no vamos a usar mas dockers

    	se creo la carpeta models donde se guardan el formato de como debe estar planteado la especificacion del idioma y un /raw que
    	representa el como vienen los archivos asi nomas descargados de la pagina oficial de sphinx

    	en este ejemplo muestra como algunos archivos que se deben copiar del raw a el del italiano pero funciana con la misma logica en español

    	archivos del raw   > archivos del es-ES

    	etc/voxforge_it_sphinx.lm > speech_recognition/pocketsphinx-data/it-IT/language-model.lm.bin
    	etc/voxforge_it_sphinx.dic > speech_recognition/pocketsphinx-data/it-IT/pronounciation-dictionary.dict
    	model_parameters/voxforge_it_sphinx.cd_cont_2000/ > speech_recognition/pocketsphinx-data/it-IT/acoustic-model/

    	IMPORTANTE MANTENER EL NOMBRE CORRECTO DE LOS ARCHIVOS

    	si llega a ser distinto el formato en linux, lo que es poco probable, hay un modelo base en ingles que muestra el como deberia estar.

    	se agrego un /diccionario-extra en caso de que tengamos ganas de expandir el que ya viene por default en sphinx y a su vez tener una copia de respaldo
    	adicional con lo anterior. el archivo de diccionario tiene que cambiar el formato de como esta escrito y debe terminar en .dic

   	avances: funciona el reconocimiento de voz y el pasaje a texto.
    	problemas secundarios: es lento y de poco vocabulario
    	--

